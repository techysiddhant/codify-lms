// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id         Int      @id @default(autoincrement())
//   name       String?
//   email      String   @unique
//   password   String?
//   provider   String?
//   providerId String?
//   role       String   @default("USER")
//   profile    String?
//   // courses    Course[]
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  creators      Creator[]
  role          String    @default("USER")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Course {
  id               String    @id @default(uuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  title            String    @db.Text
  description      String?   @db.Text
  shortDescription String?   @db.Text
  imageUrl         String?   @db.Text
  price            Float?
  isPublished      Boolean   @default(false)
  imagePublicId    String?
  categoryId       String?
  category         Category? @relation(fields: [categoryId], references: [id])

  chapters  Chapter[]
  // attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  videoId     String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  courseId    String
  userId      String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  muxData      MuxData?
  attachments  Attachment[]
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String  @id @default(uuid())
  name      String
  url       String  @db.Text
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  courseId  String?
  publicId  String
  // course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
  @@map(name: "aggregatePurchase")
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Creator {
  id          String  @id @default(cuid())
  userId      String  @map("user_id")
  firstName   String
  lastName    String
  displayName String
  email       String  @unique
  description String
  terms       Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
